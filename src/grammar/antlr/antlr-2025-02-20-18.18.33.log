2025-02-20 18:18:32:743 grammar LogManager.java:25 load pss_lexer from pss.g4
2025-02-20 18:18:32:785 grammar LogManager.java:25 before: (PARSER_GRAMMAR pss (import pss_lexer) (OPTIONS (= tokenVocab pss_lexer)) (import package_body package_declaration component_declaration) (RULES (RULE compilation_unit (BLOCK (ALT (* (BLOCK (ALT pss))) EOF))) (RULE pss (BLOCK (ALT package_body) (ALT package_declaration) (ALT component_declaration)))))
2025-02-20 18:18:32:791 grammar LogManager.java:25 imported actions: []
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_SCOPE (BLOCK (ALT '::')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_SEMICOLON (BLOCK (ALT ';')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_ASTERISK (BLOCK (ALT '*')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_COMMA (BLOCK (ALT ',')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_COLON (BLOCK (ALT ':')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_EQUALS (BLOCK (ALT '=')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_ELLIPSIS (BLOCK (ALT '...')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_DOT (BLOCK (ALT '.')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_DDOT (BLOCK (ALT '..')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_LT (BLOCK (ALT '<')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_GT (BLOCK (ALT '>')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_IMPLY (BLOCK (ALT '->')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_COLASSIGN (BLOCK (ALT ':=')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_COLPATH (BLOCK (ALT ':/')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_MINUS (BLOCK (ALT '-')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_EXCLAMATION (BLOCK (ALT '!')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_TILDA (BLOCK (ALT '~')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_AND (BLOCK (ALT '&')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_OR (BLOCK (ALT '|')))
2025-02-20 18:18:32:801 grammar LogManager.java:25 imported rule: (RULE TOKEN_CARET (BLOCK (ALT '^')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_DIVIDE (BLOCK (ALT '/')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_MOD (BLOCK (ALT '%')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_ADD (BLOCK (ALT '+')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_QUESTION (BLOCK (ALT '?')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_UNDERSCORE (BLOCK (ALT '_')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_ZERO (BLOCK (ALT '0')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_EQUALEQUAL (BLOCK (ALT '==')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_LSHIFT (BLOCK (ALT '<<')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_RSHIFT (BLOCK (ALT '>>')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_NOTEQUAL (BLOCK (ALT '!=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_LTEQ (BLOCK (ALT '<=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_GTEQ (BLOCK (ALT '>=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_OROR (BLOCK (ALT '||')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_ANDAND (BLOCK (ALT '&&')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_DASTERISK (BLOCK (ALT '**')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_PLUSEQ (BLOCK (ALT '+=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_MINUSEQ (BLOCK (ALT '-=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_LSHIFTEQ (BLOCK (ALT '<<=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_RSHIFTQE (BLOCK (ALT '>>=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_OREQ (BLOCK (ALT '|=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_ANDEQ (BLOCK (ALT '&=')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_FLBRACE (BLOCK (ALT '(')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_FRBRACE (BLOCK (ALT ')')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_CLBRACE (BLOCK (ALT '{')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_CRBRACE (BLOCK (ALT '}')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_SLBRACE (BLOCK (ALT '[')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_SRBRACE (BLOCK (ALT ']')))
2025-02-20 18:18:32:802 grammar LogManager.java:25 imported rule: (RULE TOKEN_IMPORT (BLOCK (ALT 'import')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_AS (BLOCK (ALT 'as')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_EXTEND (BLOCK (ALT 'extend')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_ACTION (BLOCK (ALT 'action')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_COMPONENT (BLOCK (ALT 'component')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_ENUM (BLOCK (ALT 'enum')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_STATIC (BLOCK (ALT 'static')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_CONST (BLOCK (ALT 'const')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_ABSTRACT (BLOCK (ALT 'abstract')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_INPUT (BLOCK (ALT 'input')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_OUTPUT (BLOCK (ALT 'output')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_INOUT (BLOCK (ALT 'inout')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_LOCK (BLOCK (ALT 'lock')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_SHARE (BLOCK (ALT 'share')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_CONSTRAINT (BLOCK (ALT 'constraint')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_PARALLEL (BLOCK (ALT 'parallel')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_SEQUENCE (BLOCK (ALT 'sequence')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_STRUCT (BLOCK (ALT 'struct')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_BUFFER (BLOCK (ALT 'buffer')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_STREAM (BLOCK (ALT 'stream')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_STATE (BLOCK (ALT 'state')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_RESOURCE (BLOCK (ALT 'resource')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_EXEC (BLOCK (ALT 'exec')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_PRESOLVE (BLOCK (ALT 'pre_solve')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_POSTSOLVE (BLOCK (ALT 'post_solve')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_PREBODY (BLOCK (ALT 'pre_body')))
2025-02-20 18:18:32:803 grammar LogManager.java:25 imported rule: (RULE TOKEN_BODY (BLOCK (ALT 'body')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_HEADER (BLOCK (ALT 'header')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_DECLARATION (BLOCK (ALT 'declaration')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_RUNSTART (BLOCK (ALT 'run_start')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_RUNEND (BLOCK (ALT 'run_end')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_INITDOWN (BLOCK (ALT 'init_down')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_INITUP (BLOCK (ALT 'init_up')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_INIT (BLOCK (ALT 'init')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_SUPER (BLOCK (ALT 'super')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_PURE (BLOCK (ALT 'pure')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_TARGET (BLOCK (ALT 'target')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_SOLVE (BLOCK (ALT 'solve')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_VOID (BLOCK (ALT 'void')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_TYPE (BLOCK (ALT 'type')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_REF (BLOCK (ALT 'ref')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_FUNCTION (BLOCK (ALT 'function')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_CLASS (BLOCK (ALT 'class')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_EXPORT (BLOCK (ALT 'export')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_RETURN (BLOCK (ALT 'return')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_REPEAT (BLOCK (ALT 'repeat')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_WHILE (BLOCK (ALT 'while')))
2025-02-20 18:18:32:804 grammar LogManager.java:25 imported rule: (RULE TOKEN_IF (BLOCK (ALT 'if')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_ELSE (BLOCK (ALT 'else')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_MATCH (BLOCK (ALT 'match')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_DEFAULT (BLOCK (ALT 'default')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_BREAK (BLOCK (ALT 'break')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_CONTINUE (BLOCK (ALT 'continue')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_RANDOMIZE (BLOCK (ALT 'randomize')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_WITH (BLOCK (ALT 'with')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_YIELD (BLOCK (ALT 'yield')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_POOL (BLOCK (ALT 'pool')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_BIND (BLOCK (ALT 'bind')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_DO (BLOCK (ALT 'do')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_SCHEDULE (BLOCK (ALT 'schedule')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_JOINBRANCH (BLOCK (ALT 'join_branch')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_JOINSELECT (BLOCK (ALT 'join_select')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_JOINNONE (BLOCK (ALT 'join_none')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_JOINFIRST (BLOCK (ALT 'join_first')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_FOREACH (BLOCK (ALT 'foreach')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_SELECT (BLOCK (ALT 'select')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_REPLICATE (BLOCK (ALT 'replicate')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_ATOMIC (BLOCK (ALT 'atomic')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_SYMBOL (BLOCK (ALT 'symbol')))
2025-02-20 18:18:32:805 grammar LogManager.java:25 imported rule: (RULE TOKEN_OVERRIDE (BLOCK (ALT 'override')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_INSTANCE (BLOCK (ALT 'instance')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_RAND (BLOCK (ALT 'rand')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_PUBLIC (BLOCK (ALT 'public')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_PROTECTED (BLOCK (ALT 'protected')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_PRIVATE (BLOCK (ALT 'private')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_COVER (BLOCK (ALT 'cover')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_MONITOR (BLOCK (ALT 'monitor')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_ACTIVITY (BLOCK (ALT 'activity')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_CONCAT (BLOCK (ALT 'concat')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_EVENTUALLY (BLOCK (ALT 'eventually')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_OVERLAP (BLOCK (ALT 'overlap')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_CHANDLE (BLOCK (ALT 'chandle')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_IN (BLOCK (ALT 'in')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_INT (BLOCK (ALT 'int')))
2025-02-20 18:18:32:806 grammar LogManager.java:25 imported rule: (RULE TOKEN_BIT (BLOCK (ALT 'bit')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_STRING (BLOCK (ALT 'string')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_BOOL (BLOCK (ALT 'bool')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_FLOAT32 (BLOCK (ALT 'float32')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_FLOAT64 (BLOCK (ALT 'float64')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_ARRAY (BLOCK (ALT 'array')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_LIST (BLOCK (ALT 'list')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_MAP (BLOCK (ALT 'map')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_SET (BLOCK (ALT 'set')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_TYPEDEF (BLOCK (ALT 'typedef')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_DYNAMIC (BLOCK (ALT 'dynamic')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_DISABLE (BLOCK (ALT 'disable')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_FORALL (BLOCK (ALT 'forall')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_UNIQUE (BLOCK (ALT 'unique')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_DIST (BLOCK (ALT 'dist')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_COVERGROUP (BLOCK (ALT 'covergroup')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_OPTION (BLOCK (ALT 'option')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_IFF (BLOCK (ALT 'iff')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_COVERPOINT (BLOCK (ALT 'coverpoint')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_BINS (BLOCK (ALT 'bins')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_ILLEGALBINS (BLOCK (ALT 'illegal_bins')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_IGNOREBINS (BLOCK (ALT 'ignore_bins')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_CROSS (BLOCK (ALT 'cross')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_COMPILE (BLOCK (ALT 'compile')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_HAS (BLOCK (ALT 'has')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_ASSERT (BLOCK (ALT 'assert')))
2025-02-20 18:18:32:807 grammar LogManager.java:25 imported rule: (RULE TOKEN_TRUE (BLOCK (ALT 'true')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_FALSE (BLOCK (ALT 'false')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_NULL (BLOCK (ALT 'null')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_FILE (BLOCK (ALT 'file')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE BIN_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT '0') (ALT '1')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE OCT_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7])))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE DEC_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9])))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE HEX_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F])))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE EXP (RULEMODIFIERS fragment) (BLOCK (ALT 'e') (ALT 'E')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE SIGN (RULEMODIFIERS fragment) (BLOCK (ALT '+') (ALT '-')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_EXP (BLOCK (ALT EXP)))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_SIGN (BLOCK (ALT SIGN)))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_BIN_NUMBER (BLOCK (ALT '0' (BLOCK (ALT 'b') (ALT 'B')) BIN_DIGIT (* (BLOCK (ALT BIN_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_OCT_NUMBER (BLOCK (ALT '0' (* (BLOCK (ALT OCT_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_DEC_NUMBER (BLOCK (ALT [1-9] (* (BLOCK (ALT DEC_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_HEX_NUMBER (BLOCK (ALT '0' (BLOCK (ALT 'x') (ALT 'X')) HEX_DIGIT (* (BLOCK (ALT HEX_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_BASED_BIN_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'b') (ALT 'B')) BIN_DIGIT (* (BLOCK (ALT BIN_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_BASED_OCT_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'o') (ALT 'O')) OCT_DIGIT (* (BLOCK (ALT OCT_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_BASED_DEC_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'd') (ALT 'D')) DEC_DIGIT (* (BLOCK (ALT DEC_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_BASED_HEX_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'h') (ALT 'H')) HEX_DIGIT (* (BLOCK (ALT HEX_DIGIT) (ALT '_'))))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n]))))) '\n') (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_QUOTED_STRING (BLOCK (ALT '"' (* (BLOCK (ALT UNESCAPED_CHARACTER) (ALT ESCAPED_CHARACTER))) '"')))
2025-02-20 18:18:32:808 grammar LogManager.java:25 imported rule: (RULE TOKEN_TRIPLE_QUOTED_STRING (BLOCK (ALT '"""' (* (BLOCK (ALT .))) '"""')))
2025-02-20 18:18:32:809 grammar LogManager.java:25 imported rule: (RULE UNESCAPED_CHARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ["\\])))))
2025-02-20 18:18:32:809 grammar LogManager.java:25 imported rule: (RULE ESCAPED_CHARACTER (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"\\?abfnrtv]) (ALT '\\' [0-7] [0-7] [0-7])))
2025-02-20 18:18:32:809 grammar LogManager.java:25 imported rule: (RULE TOKEN_FILENAME_STRING (BLOCK (ALT TOKEN_QUOTED_STRING)))
2025-02-20 18:18:32:809 grammar LogManager.java:25 imported rule: (RULE TOKEN_ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9]))))))
2025-02-20 18:18:32:809 grammar LogManager.java:25 imported rule: (RULE ESCAPED_ID (BLOCK (ALT '\\' (+ (BLOCK (ALT (~ (SET [ \t\r\n]))))) (+ (BLOCK (ALT [ \t\r\n]))))))
2025-02-20 18:18:32:809 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))
2025-02-20 18:18:32:810 grammar LogManager.java:25 Grammar: (PARSER_GRAMMAR pss (import pss_lexer) (OPTIONS (= tokenVocab pss_lexer)) (import package_body package_declaration component_declaration) (RULES (RULE compilation_unit (BLOCK (ALT (* (BLOCK (ALT pss))) EOF))) (RULE pss (BLOCK (ALT package_body) (ALT package_declaration) (ALT component_declaration))) (RULE TOKEN_SCOPE (BLOCK (ALT '::'))) (RULE TOKEN_SEMICOLON (BLOCK (ALT ';'))) (RULE TOKEN_ASTERISK (BLOCK (ALT '*'))) (RULE TOKEN_COMMA (BLOCK (ALT ','))) (RULE TOKEN_COLON (BLOCK (ALT ':'))) (RULE TOKEN_EQUALS (BLOCK (ALT '='))) (RULE TOKEN_ELLIPSIS (BLOCK (ALT '...'))) (RULE TOKEN_DOT (BLOCK (ALT '.'))) (RULE TOKEN_DDOT (BLOCK (ALT '..'))) (RULE TOKEN_LT (BLOCK (ALT '<'))) (RULE TOKEN_GT (BLOCK (ALT '>'))) (RULE TOKEN_IMPLY (BLOCK (ALT '->'))) (RULE TOKEN_COLASSIGN (BLOCK (ALT ':='))) (RULE TOKEN_COLPATH (BLOCK (ALT ':/'))) (RULE TOKEN_MINUS (BLOCK (ALT '-'))) (RULE TOKEN_EXCLAMATION (BLOCK (ALT '!'))) (RULE TOKEN_TILDA (BLOCK (ALT '~'))) (RULE TOKEN_AND (BLOCK (ALT '&'))) (RULE TOKEN_OR (BLOCK (ALT '|'))) (RULE TOKEN_CARET (BLOCK (ALT '^'))) (RULE TOKEN_DIVIDE (BLOCK (ALT '/'))) (RULE TOKEN_MOD (BLOCK (ALT '%'))) (RULE TOKEN_ADD (BLOCK (ALT '+'))) (RULE TOKEN_QUESTION (BLOCK (ALT '?'))) (RULE TOKEN_UNDERSCORE (BLOCK (ALT '_'))) (RULE TOKEN_ZERO (BLOCK (ALT '0'))) (RULE TOKEN_EQUALEQUAL (BLOCK (ALT '=='))) (RULE TOKEN_LSHIFT (BLOCK (ALT '<<'))) (RULE TOKEN_RSHIFT (BLOCK (ALT '>>'))) (RULE TOKEN_NOTEQUAL (BLOCK (ALT '!='))) (RULE TOKEN_LTEQ (BLOCK (ALT '<='))) (RULE TOKEN_GTEQ (BLOCK (ALT '>='))) (RULE TOKEN_OROR (BLOCK (ALT '||'))) (RULE TOKEN_ANDAND (BLOCK (ALT '&&'))) (RULE TOKEN_DASTERISK (BLOCK (ALT '**'))) (RULE TOKEN_PLUSEQ (BLOCK (ALT '+='))) (RULE TOKEN_MINUSEQ (BLOCK (ALT '-='))) (RULE TOKEN_LSHIFTEQ (BLOCK (ALT '<<='))) (RULE TOKEN_RSHIFTQE (BLOCK (ALT '>>='))) (RULE TOKEN_OREQ (BLOCK (ALT '|='))) (RULE TOKEN_ANDEQ (BLOCK (ALT '&='))) (RULE TOKEN_FLBRACE (BLOCK (ALT '('))) (RULE TOKEN_FRBRACE (BLOCK (ALT ')'))) (RULE TOKEN_CLBRACE (BLOCK (ALT '{'))) (RULE TOKEN_CRBRACE (BLOCK (ALT '}'))) (RULE TOKEN_SLBRACE (BLOCK (ALT '['))) (RULE TOKEN_SRBRACE (BLOCK (ALT ']'))) (RULE TOKEN_IMPORT (BLOCK (ALT 'import'))) (RULE TOKEN_AS (BLOCK (ALT 'as'))) (RULE TOKEN_EXTEND (BLOCK (ALT 'extend'))) (RULE TOKEN_ACTION (BLOCK (ALT 'action'))) (RULE TOKEN_COMPONENT (BLOCK (ALT 'component'))) (RULE TOKEN_ENUM (BLOCK (ALT 'enum'))) (RULE TOKEN_STATIC (BLOCK (ALT 'static'))) (RULE TOKEN_CONST (BLOCK (ALT 'const'))) (RULE TOKEN_ABSTRACT (BLOCK (ALT 'abstract'))) (RULE TOKEN_INPUT (BLOCK (ALT 'input'))) (RULE TOKEN_OUTPUT (BLOCK (ALT 'output'))) (RULE TOKEN_INOUT (BLOCK (ALT 'inout'))) (RULE TOKEN_LOCK (BLOCK (ALT 'lock'))) (RULE TOKEN_SHARE (BLOCK (ALT 'share'))) (RULE TOKEN_CONSTRAINT (BLOCK (ALT 'constraint'))) (RULE TOKEN_PARALLEL (BLOCK (ALT 'parallel'))) (RULE TOKEN_SEQUENCE (BLOCK (ALT 'sequence'))) (RULE TOKEN_STRUCT (BLOCK (ALT 'struct'))) (RULE TOKEN_BUFFER (BLOCK (ALT 'buffer'))) (RULE TOKEN_STREAM (BLOCK (ALT 'stream'))) (RULE TOKEN_STATE (BLOCK (ALT 'state'))) (RULE TOKEN_RESOURCE (BLOCK (ALT 'resource'))) (RULE TOKEN_EXEC (BLOCK (ALT 'exec'))) (RULE TOKEN_PRESOLVE (BLOCK (ALT 'pre_solve'))) (RULE TOKEN_POSTSOLVE (BLOCK (ALT 'post_solve'))) (RULE TOKEN_PREBODY (BLOCK (ALT 'pre_body'))) (RULE TOKEN_BODY (BLOCK (ALT 'body'))) (RULE TOKEN_HEADER (BLOCK (ALT 'header'))) (RULE TOKEN_DECLARATION (BLOCK (ALT 'declaration'))) (RULE TOKEN_RUNSTART (BLOCK (ALT 'run_start'))) (RULE TOKEN_RUNEND (BLOCK (ALT 'run_end'))) (RULE TOKEN_INITDOWN (BLOCK (ALT 'init_down'))) (RULE TOKEN_INITUP (BLOCK (ALT 'init_up'))) (RULE TOKEN_INIT (BLOCK (ALT 'init'))) (RULE TOKEN_SUPER (BLOCK (ALT 'super'))) (RULE TOKEN_PURE (BLOCK (ALT 'pure'))) (RULE TOKEN_TARGET (BLOCK (ALT 'target'))) (RULE TOKEN_SOLVE (BLOCK (ALT 'solve'))) (RULE TOKEN_VOID (BLOCK (ALT 'void'))) (RULE TOKEN_TYPE (BLOCK (ALT 'type'))) (RULE TOKEN_REF (BLOCK (ALT 'ref'))) (RULE TOKEN_FUNCTION (BLOCK (ALT 'function'))) (RULE TOKEN_CLASS (BLOCK (ALT 'class'))) (RULE TOKEN_EXPORT (BLOCK (ALT 'export'))) (RULE TOKEN_RETURN (BLOCK (ALT 'return'))) (RULE TOKEN_REPEAT (BLOCK (ALT 'repeat'))) (RULE TOKEN_WHILE (BLOCK (ALT 'while'))) (RULE TOKEN_IF (BLOCK (ALT 'if'))) (RULE TOKEN_ELSE (BLOCK (ALT 'else'))) (RULE TOKEN_MATCH (BLOCK (ALT 'match'))) (RULE TOKEN_DEFAULT (BLOCK (ALT 'default'))) (RULE TOKEN_BREAK (BLOCK (ALT 'break'))) (RULE TOKEN_CONTINUE (BLOCK (ALT 'continue'))) (RULE TOKEN_RANDOMIZE (BLOCK (ALT 'randomize'))) (RULE TOKEN_WITH (BLOCK (ALT 'with'))) (RULE TOKEN_YIELD (BLOCK (ALT 'yield'))) (RULE TOKEN_POOL (BLOCK (ALT 'pool'))) (RULE TOKEN_BIND (BLOCK (ALT 'bind'))) (RULE TOKEN_DO (BLOCK (ALT 'do'))) (RULE TOKEN_SCHEDULE (BLOCK (ALT 'schedule'))) (RULE TOKEN_JOINBRANCH (BLOCK (ALT 'join_branch'))) (RULE TOKEN_JOINSELECT (BLOCK (ALT 'join_select'))) (RULE TOKEN_JOINNONE (BLOCK (ALT 'join_none'))) (RULE TOKEN_JOINFIRST (BLOCK (ALT 'join_first'))) (RULE TOKEN_FOREACH (BLOCK (ALT 'foreach'))) (RULE TOKEN_SELECT (BLOCK (ALT 'select'))) (RULE TOKEN_REPLICATE (BLOCK (ALT 'replicate'))) (RULE TOKEN_ATOMIC (BLOCK (ALT 'atomic'))) (RULE TOKEN_SYMBOL (BLOCK (ALT 'symbol'))) (RULE TOKEN_OVERRIDE (BLOCK (ALT 'override'))) (RULE TOKEN_INSTANCE (BLOCK (ALT 'instance'))) (RULE TOKEN_RAND (BLOCK (ALT 'rand'))) (RULE TOKEN_PUBLIC (BLOCK (ALT 'public'))) (RULE TOKEN_PROTECTED (BLOCK (ALT 'protected'))) (RULE TOKEN_PRIVATE (BLOCK (ALT 'private'))) (RULE TOKEN_COVER (BLOCK (ALT 'cover'))) (RULE TOKEN_MONITOR (BLOCK (ALT 'monitor'))) (RULE TOKEN_ACTIVITY (BLOCK (ALT 'activity'))) (RULE TOKEN_CONCAT (BLOCK (ALT 'concat'))) (RULE TOKEN_EVENTUALLY (BLOCK (ALT 'eventually'))) (RULE TOKEN_OVERLAP (BLOCK (ALT 'overlap'))) (RULE TOKEN_CHANDLE (BLOCK (ALT 'chandle'))) (RULE TOKEN_IN (BLOCK (ALT 'in'))) (RULE TOKEN_INT (BLOCK (ALT 'int'))) (RULE TOKEN_BIT (BLOCK (ALT 'bit'))) (RULE TOKEN_STRING (BLOCK (ALT 'string'))) (RULE TOKEN_BOOL (BLOCK (ALT 'bool'))) (RULE TOKEN_FLOAT32 (BLOCK (ALT 'float32'))) (RULE TOKEN_FLOAT64 (BLOCK (ALT 'float64'))) (RULE TOKEN_ARRAY (BLOCK (ALT 'array'))) (RULE TOKEN_LIST (BLOCK (ALT 'list'))) (RULE TOKEN_MAP (BLOCK (ALT 'map'))) (RULE TOKEN_SET (BLOCK (ALT 'set'))) (RULE TOKEN_TYPEDEF (BLOCK (ALT 'typedef'))) (RULE TOKEN_DYNAMIC (BLOCK (ALT 'dynamic'))) (RULE TOKEN_DISABLE (BLOCK (ALT 'disable'))) (RULE TOKEN_FORALL (BLOCK (ALT 'forall'))) (RULE TOKEN_UNIQUE (BLOCK (ALT 'unique'))) (RULE TOKEN_DIST (BLOCK (ALT 'dist'))) (RULE TOKEN_COVERGROUP (BLOCK (ALT 'covergroup'))) (RULE TOKEN_OPTION (BLOCK (ALT 'option'))) (RULE TOKEN_IFF (BLOCK (ALT 'iff'))) (RULE TOKEN_COVERPOINT (BLOCK (ALT 'coverpoint'))) (RULE TOKEN_BINS (BLOCK (ALT 'bins'))) (RULE TOKEN_ILLEGALBINS (BLOCK (ALT 'illegal_bins'))) (RULE TOKEN_IGNOREBINS (BLOCK (ALT 'ignore_bins'))) (RULE TOKEN_CROSS (BLOCK (ALT 'cross'))) (RULE TOKEN_COMPILE (BLOCK (ALT 'compile'))) (RULE TOKEN_HAS (BLOCK (ALT 'has'))) (RULE TOKEN_ASSERT (BLOCK (ALT 'assert'))) (RULE TOKEN_TRUE (BLOCK (ALT 'true'))) (RULE TOKEN_FALSE (BLOCK (ALT 'false'))) (RULE TOKEN_NULL (BLOCK (ALT 'null'))) (RULE TOKEN_FILE (BLOCK (ALT 'file'))) (RULE BIN_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT '0') (ALT '1'))) (RULE OCT_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE DEC_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE HEX_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE EXP (RULEMODIFIERS fragment) (BLOCK (ALT 'e') (ALT 'E'))) (RULE SIGN (RULEMODIFIERS fragment) (BLOCK (ALT '+') (ALT '-'))) (RULE TOKEN_EXP (BLOCK (ALT EXP))) (RULE TOKEN_SIGN (BLOCK (ALT SIGN))) (RULE TOKEN_BIN_NUMBER (BLOCK (ALT '0' (BLOCK (ALT 'b') (ALT 'B')) BIN_DIGIT (* (BLOCK (ALT BIN_DIGIT) (ALT '_')))))) (RULE TOKEN_OCT_NUMBER (BLOCK (ALT '0' (* (BLOCK (ALT OCT_DIGIT) (ALT '_')))))) (RULE TOKEN_DEC_NUMBER (BLOCK (ALT [1-9] (* (BLOCK (ALT DEC_DIGIT) (ALT '_')))))) (RULE TOKEN_HEX_NUMBER (BLOCK (ALT '0' (BLOCK (ALT 'x') (ALT 'X')) HEX_DIGIT (* (BLOCK (ALT HEX_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_BIN_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'b') (ALT 'B')) BIN_DIGIT (* (BLOCK (ALT BIN_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_OCT_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'o') (ALT 'O')) OCT_DIGIT (* (BLOCK (ALT OCT_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_DEC_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'd') (ALT 'D')) DEC_DIGIT (* (BLOCK (ALT DEC_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_HEX_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT 's') (ALT 'S'))) (BLOCK (ALT 'h') (ALT 'H')) HEX_DIGIT (* (BLOCK (ALT HEX_DIGIT) (ALT '_')))))) (RULE TOKEN_SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n]))))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE TOKEN_ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE TOKEN_QUOTED_STRING (BLOCK (ALT '"' (* (BLOCK (ALT UNESCAPED_CHARACTER) (ALT ESCAPED_CHARACTER))) '"'))) (RULE TOKEN_TRIPLE_QUOTED_STRING (BLOCK (ALT '"""' (* (BLOCK (ALT .))) '"""'))) (RULE UNESCAPED_CHARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ["\\]))))) (RULE ESCAPED_CHARACTER (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"\\?abfnrtv]) (ALT '\\' [0-7] [0-7] [0-7]))) (RULE TOKEN_FILENAME_STRING (BLOCK (ALT TOKEN_QUOTED_STRING))) (RULE TOKEN_ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE ESCAPED_ID (BLOCK (ALT '\\' (+ (BLOCK (ALT (~ (SET [ \t\r\n]))))) (+ (BLOCK (ALT [ \t\r\n])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
2025-02-20 18:18:32:901 grammar LogManager.java:25 after: (PARSER_GRAMMAR pss (import pss_lexer) (OPTIONS (= tokenVocab pss_lexer)) (import package_body package_declaration component_declaration) (RULES (RULE compilation_unit (BLOCK (ALT (* (BLOCK (ALT pss))) EOF))) (RULE pss (BLOCK (ALT package_body) (ALT package_declaration) (ALT component_declaration))) (RULE TOKEN_SCOPE (BLOCK (ALT '::'))) (RULE TOKEN_SEMICOLON (BLOCK (ALT ';'))) (RULE TOKEN_ASTERISK (BLOCK (ALT '*'))) (RULE TOKEN_COMMA (BLOCK (ALT ','))) (RULE TOKEN_COLON (BLOCK (ALT ':'))) (RULE TOKEN_EQUALS (BLOCK (ALT '='))) (RULE TOKEN_ELLIPSIS (BLOCK (ALT '...'))) (RULE TOKEN_DOT (BLOCK (ALT '.'))) (RULE TOKEN_DDOT (BLOCK (ALT '..'))) (RULE TOKEN_LT (BLOCK (ALT '<'))) (RULE TOKEN_GT (BLOCK (ALT '>'))) (RULE TOKEN_IMPLY (BLOCK (ALT '->'))) (RULE TOKEN_COLASSIGN (BLOCK (ALT ':='))) (RULE TOKEN_COLPATH (BLOCK (ALT ':/'))) (RULE TOKEN_MINUS (BLOCK (ALT '-'))) (RULE TOKEN_EXCLAMATION (BLOCK (ALT '!'))) (RULE TOKEN_TILDA (BLOCK (ALT '~'))) (RULE TOKEN_AND (BLOCK (ALT '&'))) (RULE TOKEN_OR (BLOCK (ALT '|'))) (RULE TOKEN_CARET (BLOCK (ALT '^'))) (RULE TOKEN_DIVIDE (BLOCK (ALT '/'))) (RULE TOKEN_MOD (BLOCK (ALT '%'))) (RULE TOKEN_ADD (BLOCK (ALT '+'))) (RULE TOKEN_QUESTION (BLOCK (ALT '?'))) (RULE TOKEN_UNDERSCORE (BLOCK (ALT '_'))) (RULE TOKEN_ZERO (BLOCK (ALT '0'))) (RULE TOKEN_EQUALEQUAL (BLOCK (ALT '=='))) (RULE TOKEN_LSHIFT (BLOCK (ALT '<<'))) (RULE TOKEN_RSHIFT (BLOCK (ALT '>>'))) (RULE TOKEN_NOTEQUAL (BLOCK (ALT '!='))) (RULE TOKEN_LTEQ (BLOCK (ALT '<='))) (RULE TOKEN_GTEQ (BLOCK (ALT '>='))) (RULE TOKEN_OROR (BLOCK (ALT '||'))) (RULE TOKEN_ANDAND (BLOCK (ALT '&&'))) (RULE TOKEN_DASTERISK (BLOCK (ALT '**'))) (RULE TOKEN_PLUSEQ (BLOCK (ALT '+='))) (RULE TOKEN_MINUSEQ (BLOCK (ALT '-='))) (RULE TOKEN_LSHIFTEQ (BLOCK (ALT '<<='))) (RULE TOKEN_RSHIFTQE (BLOCK (ALT '>>='))) (RULE TOKEN_OREQ (BLOCK (ALT '|='))) (RULE TOKEN_ANDEQ (BLOCK (ALT '&='))) (RULE TOKEN_FLBRACE (BLOCK (ALT '('))) (RULE TOKEN_FRBRACE (BLOCK (ALT ')'))) (RULE TOKEN_CLBRACE (BLOCK (ALT '{'))) (RULE TOKEN_CRBRACE (BLOCK (ALT '}'))) (RULE TOKEN_SLBRACE (BLOCK (ALT '['))) (RULE TOKEN_SRBRACE (BLOCK (ALT ']'))) (RULE TOKEN_IMPORT (BLOCK (ALT 'import'))) (RULE TOKEN_AS (BLOCK (ALT 'as'))) (RULE TOKEN_EXTEND (BLOCK (ALT 'extend'))) (RULE TOKEN_ACTION (BLOCK (ALT 'action'))) (RULE TOKEN_COMPONENT (BLOCK (ALT 'component'))) (RULE TOKEN_ENUM (BLOCK (ALT 'enum'))) (RULE TOKEN_STATIC (BLOCK (ALT 'static'))) (RULE TOKEN_CONST (BLOCK (ALT 'const'))) (RULE TOKEN_ABSTRACT (BLOCK (ALT 'abstract'))) (RULE TOKEN_INPUT (BLOCK (ALT 'input'))) (RULE TOKEN_OUTPUT (BLOCK (ALT 'output'))) (RULE TOKEN_INOUT (BLOCK (ALT 'inout'))) (RULE TOKEN_LOCK (BLOCK (ALT 'lock'))) (RULE TOKEN_SHARE (BLOCK (ALT 'share'))) (RULE TOKEN_CONSTRAINT (BLOCK (ALT 'constraint'))) (RULE TOKEN_PARALLEL (BLOCK (ALT 'parallel'))) (RULE TOKEN_SEQUENCE (BLOCK (ALT 'sequence'))) (RULE TOKEN_STRUCT (BLOCK (ALT 'struct'))) (RULE TOKEN_BUFFER (BLOCK (ALT 'buffer'))) (RULE TOKEN_STREAM (BLOCK (ALT 'stream'))) (RULE TOKEN_STATE (BLOCK (ALT 'state'))) (RULE TOKEN_RESOURCE (BLOCK (ALT 'resource'))) (RULE TOKEN_EXEC (BLOCK (ALT 'exec'))) (RULE TOKEN_PRESOLVE (BLOCK (ALT 'pre_solve'))) (RULE TOKEN_POSTSOLVE (BLOCK (ALT 'post_solve'))) (RULE TOKEN_PREBODY (BLOCK (ALT 'pre_body'))) (RULE TOKEN_BODY (BLOCK (ALT 'body'))) (RULE TOKEN_HEADER (BLOCK (ALT 'header'))) (RULE TOKEN_DECLARATION (BLOCK (ALT 'declaration'))) (RULE TOKEN_RUNSTART (BLOCK (ALT 'run_start'))) (RULE TOKEN_RUNEND (BLOCK (ALT 'run_end'))) (RULE TOKEN_INITDOWN (BLOCK (ALT 'init_down'))) (RULE TOKEN_INITUP (BLOCK (ALT 'init_up'))) (RULE TOKEN_INIT (BLOCK (ALT 'init'))) (RULE TOKEN_SUPER (BLOCK (ALT 'super'))) (RULE TOKEN_PURE (BLOCK (ALT 'pure'))) (RULE TOKEN_TARGET (BLOCK (ALT 'target'))) (RULE TOKEN_SOLVE (BLOCK (ALT 'solve'))) (RULE TOKEN_VOID (BLOCK (ALT 'void'))) (RULE TOKEN_TYPE (BLOCK (ALT 'type'))) (RULE TOKEN_REF (BLOCK (ALT 'ref'))) (RULE TOKEN_FUNCTION (BLOCK (ALT 'function'))) (RULE TOKEN_CLASS (BLOCK (ALT 'class'))) (RULE TOKEN_EXPORT (BLOCK (ALT 'export'))) (RULE TOKEN_RETURN (BLOCK (ALT 'return'))) (RULE TOKEN_REPEAT (BLOCK (ALT 'repeat'))) (RULE TOKEN_WHILE (BLOCK (ALT 'while'))) (RULE TOKEN_IF (BLOCK (ALT 'if'))) (RULE TOKEN_ELSE (BLOCK (ALT 'else'))) (RULE TOKEN_MATCH (BLOCK (ALT 'match'))) (RULE TOKEN_DEFAULT (BLOCK (ALT 'default'))) (RULE TOKEN_BREAK (BLOCK (ALT 'break'))) (RULE TOKEN_CONTINUE (BLOCK (ALT 'continue'))) (RULE TOKEN_RANDOMIZE (BLOCK (ALT 'randomize'))) (RULE TOKEN_WITH (BLOCK (ALT 'with'))) (RULE TOKEN_YIELD (BLOCK (ALT 'yield'))) (RULE TOKEN_POOL (BLOCK (ALT 'pool'))) (RULE TOKEN_BIND (BLOCK (ALT 'bind'))) (RULE TOKEN_DO (BLOCK (ALT 'do'))) (RULE TOKEN_SCHEDULE (BLOCK (ALT 'schedule'))) (RULE TOKEN_JOINBRANCH (BLOCK (ALT 'join_branch'))) (RULE TOKEN_JOINSELECT (BLOCK (ALT 'join_select'))) (RULE TOKEN_JOINNONE (BLOCK (ALT 'join_none'))) (RULE TOKEN_JOINFIRST (BLOCK (ALT 'join_first'))) (RULE TOKEN_FOREACH (BLOCK (ALT 'foreach'))) (RULE TOKEN_SELECT (BLOCK (ALT 'select'))) (RULE TOKEN_REPLICATE (BLOCK (ALT 'replicate'))) (RULE TOKEN_ATOMIC (BLOCK (ALT 'atomic'))) (RULE TOKEN_SYMBOL (BLOCK (ALT 'symbol'))) (RULE TOKEN_OVERRIDE (BLOCK (ALT 'override'))) (RULE TOKEN_INSTANCE (BLOCK (ALT 'instance'))) (RULE TOKEN_RAND (BLOCK (ALT 'rand'))) (RULE TOKEN_PUBLIC (BLOCK (ALT 'public'))) (RULE TOKEN_PROTECTED (BLOCK (ALT 'protected'))) (RULE TOKEN_PRIVATE (BLOCK (ALT 'private'))) (RULE TOKEN_COVER (BLOCK (ALT 'cover'))) (RULE TOKEN_MONITOR (BLOCK (ALT 'monitor'))) (RULE TOKEN_ACTIVITY (BLOCK (ALT 'activity'))) (RULE TOKEN_CONCAT (BLOCK (ALT 'concat'))) (RULE TOKEN_EVENTUALLY (BLOCK (ALT 'eventually'))) (RULE TOKEN_OVERLAP (BLOCK (ALT 'overlap'))) (RULE TOKEN_CHANDLE (BLOCK (ALT 'chandle'))) (RULE TOKEN_IN (BLOCK (ALT 'in'))) (RULE TOKEN_INT (BLOCK (ALT 'int'))) (RULE TOKEN_BIT (BLOCK (ALT 'bit'))) (RULE TOKEN_STRING (BLOCK (ALT 'string'))) (RULE TOKEN_BOOL (BLOCK (ALT 'bool'))) (RULE TOKEN_FLOAT32 (BLOCK (ALT 'float32'))) (RULE TOKEN_FLOAT64 (BLOCK (ALT 'float64'))) (RULE TOKEN_ARRAY (BLOCK (ALT 'array'))) (RULE TOKEN_LIST (BLOCK (ALT 'list'))) (RULE TOKEN_MAP (BLOCK (ALT 'map'))) (RULE TOKEN_SET (BLOCK (ALT 'set'))) (RULE TOKEN_TYPEDEF (BLOCK (ALT 'typedef'))) (RULE TOKEN_DYNAMIC (BLOCK (ALT 'dynamic'))) (RULE TOKEN_DISABLE (BLOCK (ALT 'disable'))) (RULE TOKEN_FORALL (BLOCK (ALT 'forall'))) (RULE TOKEN_UNIQUE (BLOCK (ALT 'unique'))) (RULE TOKEN_DIST (BLOCK (ALT 'dist'))) (RULE TOKEN_COVERGROUP (BLOCK (ALT 'covergroup'))) (RULE TOKEN_OPTION (BLOCK (ALT 'option'))) (RULE TOKEN_IFF (BLOCK (ALT 'iff'))) (RULE TOKEN_COVERPOINT (BLOCK (ALT 'coverpoint'))) (RULE TOKEN_BINS (BLOCK (ALT 'bins'))) (RULE TOKEN_ILLEGALBINS (BLOCK (ALT 'illegal_bins'))) (RULE TOKEN_IGNOREBINS (BLOCK (ALT 'ignore_bins'))) (RULE TOKEN_CROSS (BLOCK (ALT 'cross'))) (RULE TOKEN_COMPILE (BLOCK (ALT 'compile'))) (RULE TOKEN_HAS (BLOCK (ALT 'has'))) (RULE TOKEN_ASSERT (BLOCK (ALT 'assert'))) (RULE TOKEN_TRUE (BLOCK (ALT 'true'))) (RULE TOKEN_FALSE (BLOCK (ALT 'false'))) (RULE TOKEN_NULL (BLOCK (ALT 'null'))) (RULE TOKEN_FILE (BLOCK (ALT 'file'))) (RULE BIN_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT (SET '0' '1')))) (RULE OCT_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE DEC_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE HEX_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE EXP (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'e' 'E')))) (RULE SIGN (RULEMODIFIERS fragment) (BLOCK (ALT (SET '+' '-')))) (RULE TOKEN_EXP (BLOCK (ALT EXP))) (RULE TOKEN_SIGN (BLOCK (ALT SIGN))) (RULE TOKEN_BIN_NUMBER (BLOCK (ALT '0' (SET 'b' 'B') BIN_DIGIT (* (BLOCK (ALT BIN_DIGIT) (ALT '_')))))) (RULE TOKEN_OCT_NUMBER (BLOCK (ALT '0' (* (BLOCK (ALT OCT_DIGIT) (ALT '_')))))) (RULE TOKEN_DEC_NUMBER (BLOCK (ALT [1-9] (* (BLOCK (ALT DEC_DIGIT) (ALT '_')))))) (RULE TOKEN_HEX_NUMBER (BLOCK (ALT '0' (SET 'x' 'X') HEX_DIGIT (* (BLOCK (ALT HEX_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_BIN_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT (SET 's' 'S')))) (SET 'b' 'B') BIN_DIGIT (* (BLOCK (ALT BIN_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_OCT_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT (SET 's' 'S')))) (SET 'o' 'O') OCT_DIGIT (* (BLOCK (ALT OCT_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_DEC_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT (SET 's' 'S')))) (SET 'd' 'D') DEC_DIGIT (* (BLOCK (ALT DEC_DIGIT) (ALT '_')))))) (RULE TOKEN_BASED_HEX_LITERAL (BLOCK (ALT '\'' (? (BLOCK (ALT (SET 's' 'S')))) (SET 'h' 'H') HEX_DIGIT (* (BLOCK (ALT HEX_DIGIT) (ALT '_')))))) (RULE TOKEN_SL_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n]))))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE TOKEN_ML_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE TOKEN_QUOTED_STRING (BLOCK (ALT '"' (* (BLOCK (ALT UNESCAPED_CHARACTER) (ALT ESCAPED_CHARACTER))) '"'))) (RULE TOKEN_TRIPLE_QUOTED_STRING (BLOCK (ALT '"""' (* (BLOCK (ALT .))) '"""'))) (RULE UNESCAPED_CHARACTER (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ["\\]))))) (RULE ESCAPED_CHARACTER (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"\\?abfnrtv]) (ALT '\\' [0-7] [0-7] [0-7]))) (RULE TOKEN_FILENAME_STRING (BLOCK (ALT TOKEN_QUOTED_STRING))) (RULE TOKEN_ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE ESCAPED_ID (BLOCK (ALT '\\' (+ (BLOCK (ALT (~ (SET [ \t\r\n]))))) (+ (BLOCK (ALT [ \t\r\n])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\r\n]) skip)))))
